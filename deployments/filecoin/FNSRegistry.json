{
  "address": "0x916915d0d41EaA8AAEd70b2A5Fb006FFc213961b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NewOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "NewResolver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "ttl",
          "type": "uint64"
        }
      ],
      "name": "NewTTL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "recordExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "records",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "ttl",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_ttl",
          "type": "uint64"
        }
      ],
      "name": "setRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setSubnodeOwner",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_ttl",
          "type": "uint64"
        }
      ],
      "name": "setSubnodeRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "setSubnodeResolver",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_ttl",
          "type": "uint64"
        }
      ],
      "name": "setTTL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "ttl",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x503636f29d8505b652b226ce2e57960a6dbd6d660bd5ee8d770e94893620496e",
  "receipt": {
    "to": null,
    "from": "0x7eE600dAf1Fc49d6708Fc35477e6EBC868F0B534",
    "contractAddress": "0x916915d0d41EaA8AAEd70b2A5Fb006FFc213961b",
    "transactionIndex": 64,
    "gasUsed": "63661024",
    "logsBloom": "0x91a0440000044009414004188020a20000040480100408000b8c0600168d01008005440110038280c004025400038504301001e33001de02c08400042072e24002001f8000400010c801009d42d602a000a182104054328826140ea1c00621c3420811190e0012007490004140102800020010040808444a480021b996885840080444a70118042008110080a400008100020c2149810228200c0440400044000e001103c00000a1481820100400220cc20620001c0022a800806006002049005814948244a30840230089004102505a25c0000001000118da200316410ae40000120464088e0401860a40700208409810a0104040b800680104080401440180",
    "blockHash": "0x3c92e614cbb3486b1124ee464e8af0e375a97ef5b5ff9ebf77f3f74964c20263",
    "transactionHash": "0x503636f29d8505b652b226ce2e57960a6dbd6d660bd5ee8d770e94893620496e",
    "logs": [],
    "blockNumber": 2783102,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8e4f1a12a8d63d08cb226f43a23260a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"NewResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"NewTTL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"recordExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_ttl\",\"type\":\"uint64\"}],\"name\":\"setRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setSubnodeOwner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_ttl\",\"type\":\"uint64\"}],\"name\":\"setSubnodeRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"setSubnodeResolver\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_ttl\",\"type\":\"uint64\"}],\"name\":\"setTTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"ttl\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructs a new FNS registry.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Query if an address is an authorized operator for another address.\",\"params\":{\"_owner\":\"The address that owns the records.\",\"operator\":\"The address that acts on behalf of the owner.\"},\"returns\":{\"_0\":\"True if `operator` is an approved operator for `owner`, false otherwise.\"}},\"owner(bytes32)\":{\"details\":\"Returns the address that owns the specified node.\",\"params\":{\"node\":\"The specified node.\"},\"returns\":{\"_0\":\"address of the owner.\"}},\"recordExists(bytes32)\":{\"details\":\"Returns whether a record has been imported to the registry.\",\"params\":{\"node\":\"The specified node.\"},\"returns\":{\"_0\":\"Bool if record exists\"}},\"resolver(bytes32)\":{\"details\":\"Returns the address of the resolver for the specified node.\",\"params\":{\"node\":\"The specified node.\"},\"returns\":{\"_0\":\"address of the resolver.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage  all of `msg.sender`'s FNS records. Emits the ApprovalForAll event.\",\"params\":{\"approved\":\"True if the operator is approved, false to revoke approval.\",\"operator\":\"Address to add to the set of authorized operators.\"}},\"setOwner(bytes32,address)\":{\"details\":\"Transfers ownership of a node to a new address. May only be called by the current owner of the node.\",\"params\":{\"_owner\":\"The address of the new owner.\",\"node\":\"The node to transfer ownership of.\"}},\"setRecord(bytes32,address,address,uint64)\":{\"details\":\"Sets the record for a node.\",\"params\":{\"_owner\":\"The address of the new owner.\",\"_resolver\":\"The address of the resolver.\",\"_ttl\":\"The TTL in seconds.\",\"node\":\"The node to update.\"}},\"setResolver(bytes32,address)\":{\"details\":\"Sets the resolver address for the specified node.\",\"params\":{\"_resolver\":\"The address of the resolver.\",\"node\":\"The node to update.\"}},\"setSubnodeOwner(bytes32,bytes32,address)\":{\"details\":\"Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\",\"params\":{\"_owner\":\"The address of the new owner.\",\"label\":\"The hash of the label specifying the subnode.\",\"node\":\"The parent node.\"}},\"setSubnodeRecord(bytes32,bytes32,address,address,uint64)\":{\"details\":\"Sets the record for a subnode.\",\"params\":{\"_owner\":\"The address of the new owner.\",\"_resolver\":\"The address of the resolver.\",\"_ttl\":\"The TTL in seconds.\",\"label\":\"The hash of the label specifying the subnode.\",\"node\":\"The parent node.\"}},\"setTTL(bytes32,uint64)\":{\"details\":\"Sets the TTL for the specified node.\",\"params\":{\"_ttl\":\"The TTL in seconds.\",\"node\":\"The node to update.\"}},\"ttl(bytes32)\":{\"details\":\"Returns the TTL of a node, and any records associated with it.\",\"params\":{\"node\":\"The specified node.\"},\"returns\":{\"_0\":\"ttl of the node.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The FNS registry contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FNSRegistry.sol\":\"FNSRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/FNSRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\nimport \\\"./interfaces/FNS.sol\\\";\\n\\n/**\\n * The FNS registry contract.\\n */\\ncontract FNSRegistry is FNS {\\n    struct Record {\\n        address owner;\\n        address resolver;\\n        uint64 ttl;\\n    }\\n\\n    mapping(bytes32 => Record) public records;\\n    mapping(address => mapping(address => bool)) operators;\\n\\n    // Permits modifications only by the owner of the specified node.\\n    modifier authorised(bytes32 node) {\\n        address rOwner = records[node].owner;\\n        require(rOwner == msg.sender || operators[rOwner][msg.sender], \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructs a new FNS registry.\\n     */\\n    constructor() {\\n        records[0x0].owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Sets the record for a node.\\n     * @param node The node to update.\\n     * @param _owner The address of the new owner.\\n     * @param _resolver The address of the resolver.\\n     * @param _ttl The TTL in seconds.\\n     */\\n    function setRecord(bytes32 node, address _owner, address _resolver, uint64 _ttl) external virtual override {\\n        setOwner(node, _owner);\\n        _setResolverAndTTL(node, _resolver, _ttl);\\n    }\\n\\n    /**\\n     * @dev Sets the record for a subnode.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param _owner The address of the new owner.\\n     * @param _resolver The address of the resolver.\\n     * @param _ttl The TTL in seconds.\\n     */\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address _owner,\\n        address _resolver,\\n        uint64 _ttl\\n    ) external virtual override {\\n        bytes32 subnode = setSubnodeOwner(node, label, _owner);\\n        _setResolverAndTTL(subnode, _resolver, _ttl);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of a node to a new address. May only be called by the current owner of the node.\\n     * @param node The node to transfer ownership of.\\n     * @param _owner The address of the new owner.\\n     */\\n    function setOwner(bytes32 node, address _owner) public virtual override authorised(node) {\\n        _setOwner(node, _owner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param _owner The address of the new owner.\\n     */\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address _owner\\n    ) public virtual override authorised(node) returns (bytes32) {\\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\\n        _setOwner(subnode, _owner);\\n        emit NewOwner(node, label, _owner);\\n        return subnode;\\n    }\\n\\n    function setSubnodeResolver(\\n        bytes32 node,\\n        bytes32 label,\\n        address _resolver\\n    ) public virtual override authorised(node) returns (bytes32) {\\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\\n        if (_resolver != records[subnode].resolver) {\\n            records[subnode].resolver = _resolver;\\n            emit NewResolver(subnode, _resolver);\\n        }\\n        return subnode;\\n    }\\n\\n    /**\\n     * @dev Sets the resolver address for the specified node.\\n     * @param node The node to update.\\n     * @param _resolver The address of the resolver.\\n     */\\n    function setResolver(bytes32 node, address _resolver) public virtual override authorised(node) {\\n        emit NewResolver(node, _resolver);\\n        records[node].resolver = _resolver;\\n    }\\n\\n    /**\\n     * @dev Sets the TTL for the specified node.\\n     * @param node The node to update.\\n     * @param _ttl The TTL in seconds.\\n     */\\n    function setTTL(bytes32 node, uint64 _ttl) public virtual override authorised(node) {\\n        emit NewTTL(node, _ttl);\\n        records[node].ttl = _ttl;\\n    }\\n\\n    /**\\n     * @dev Enable or disable approval for a third party (\\\"operator\\\") to manage\\n     *  all of `msg.sender`'s FNS records. Emits the ApprovalForAll event.\\n     * @param operator Address to add to the set of authorized operators.\\n     * @param approved True if the operator is approved, false to revoke approval.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        require(msg.sender != operator, \\\"approve to caller\\\");\\n        operators[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns the address that owns the specified node.\\n     * @param node The specified node.\\n     * @return address of the owner.\\n     */\\n    function owner(bytes32 node) public view virtual override returns (address) {\\n        address addr = records[node].owner;\\n        if (addr == address(this)) {\\n            return address(0x0);\\n        }\\n\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the resolver for the specified node.\\n     * @param node The specified node.\\n     * @return address of the resolver.\\n     */\\n    function resolver(bytes32 node) public view virtual override returns (address) {\\n        return records[node].resolver;\\n    }\\n\\n    /**\\n     * @dev Returns the TTL of a node, and any records associated with it.\\n     * @param node The specified node.\\n     * @return ttl of the node.\\n     */\\n    function ttl(bytes32 node) public view virtual override returns (uint64) {\\n        return records[node].ttl;\\n    }\\n\\n    /**\\n     * @dev Returns whether a record has been imported to the registry.\\n     * @param node The specified node.\\n     * @return Bool if record exists\\n     */\\n    function recordExists(bytes32 node) public view virtual override returns (bool) {\\n        return records[node].owner != address(0x0);\\n    }\\n\\n    /**\\n     * @dev Query if an address is an authorized operator for another address.\\n     * @param _owner The address that owns the records.\\n     * @param operator The address that acts on behalf of the owner.\\n     * @return True if `operator` is an approved operator for `owner`, false otherwise.\\n     */\\n    function isApprovedForAll(address _owner, address operator) external view virtual override returns (bool) {\\n        return operators[_owner][operator];\\n    }\\n\\n    function _setOwner(bytes32 node, address _owner) internal virtual {\\n        records[node].owner = _owner;\\n        emit Transfer(node, _owner);\\n    }\\n\\n    function _setResolverAndTTL(bytes32 node, address _resolver, uint64 _ttl) internal {\\n        if (_resolver != records[node].resolver) {\\n            records[node].resolver = _resolver;\\n            emit NewResolver(node, _resolver);\\n        }\\n\\n        if (_ttl != records[node].ttl) {\\n            records[node].ttl = _ttl;\\n            emit NewTTL(node, _ttl);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb0905b764318617ac6b6280cb13bb6aa8859dedba869ffeab01732c7c64d8557\",\"license\":\"MIT\"},\"contracts/interfaces/FNS.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\ninterface FNS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address indexed owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\\n\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\\n\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns (bytes32);\\n\\n    function setSubnodeResolver(bytes32 node, bytes32 label, address resolver) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x84f0d500ebbf70e6121714f8f481878c3853443cebb2c9493118bf68ee0a7c35\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060008080526020527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb580546001600160a01b03191633179055610c49806100596000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80631896f70a1161008c578063a22cb46511610066578063a22cb46514610291578063cf408823146102a4578063e985e9c5146102b7578063f79fe5381461030357600080fd5b80631896f70a146102585780635b0fc9c31461026b5780635ef2c7f01461027e57600080fd5b806306ab5923116100c857806306ab5923146101c25780630cba6ee5146101e357806314ab9038146101f657806316a25cbd1461020b57600080fd5b80630178b8bf146100ef57806301e647251461013857806302571be3146101af575b600080fd5b61011b6100fd366004610a12565b6000908152602081905260409020600101546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b61017f610146366004610a12565b600060208190529081526040902080546001909101546001600160a01b0391821691811690600160a01b900467ffffffffffffffff1683565b604080516001600160a01b03948516815293909216602084015267ffffffffffffffff169082015260600161012f565b61011b6101bd366004610a12565b61032e565b6101d56101d0366004610a47565b61035c565b60405190815260200161012f565b6101d56101f1366004610a47565b610448565b610209610204366004610a94565b61056e565b005b61023f610219366004610a12565b600090815260208190526040902060010154600160a01b900467ffffffffffffffff1690565b60405167ffffffffffffffff909116815260200161012f565b610209610266366004610ac0565b610654565b610209610279366004610ac0565b61072c565b61020961028c366004610ae3565b6107a3565b61020961029f366004610b3a565b6107c5565b6102096102b2366004610b76565b61087d565b6102f36102c5366004610bc3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b604051901515815260200161012f565b6102f3610311366004610a12565b6000908152602081905260409020546001600160a01b0316151590565b6000818152602081905260408120546001600160a01b03163081036103565750600092915050565b92915050565b60008381526020819052604081205484906001600160a01b0316338114806103a757506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6103cc5760405162461bcd60e51b81526004016103c390610bed565b60405180910390fd5b604080516020808201899052818301889052825180830384018152606090920190925280519101206103fe8186610892565b6040516001600160a01b0386168152869088907fce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e829060200160405180910390a39695505050505050565b60008381526020819052604081205484906001600160a01b03163381148061049357506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6104af5760405162461bcd60e51b81526004016103c390610bed565b604080516020810188905290810186905260009060600160408051601f1981840301815291815281516020928301206000818152928390529120600101549091506001600160a01b03868116911614610564576000818152602081815260409182902060010180546001600160a01b0319166001600160a01b038916908117909155915191825282917f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0910160405180910390a25b9695505050505050565b60008281526020819052604090205482906001600160a01b0316338114806105b957506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6105d55760405162461bcd60e51b81526004016103c390610bed565b60405167ffffffffffffffff8416815284907f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa689060200160405180910390a25050600091825260208290526040909120600101805467ffffffffffffffff909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b60008281526020819052604090205482906001600160a01b03163381148061069f57506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6106bb5760405162461bcd60e51b81526004016103c390610bed565b6040516001600160a01b038416815284907f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a09060200160405180910390a2505060009182526020829052604090912060010180546001600160a01b0319166001600160a01b03909216919091179055565b60008281526020819052604090205482906001600160a01b03163381148061077757506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6107935760405162461bcd60e51b81526004016103c390610bed565b61079d8484610892565b50505050565b60006107b086868661035c565b90506107bd8184846108eb565b505050505050565b6001600160a01b03821633036108115760405162461bcd60e51b815260206004820152601160248201527030b8383937bb32903a379031b0b63632b960791b60448201526064016103c3565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610887848461072c565b61079d8483836108eb565b60008281526020819052604080822080546001600160a01b0319166001600160a01b0385169081179091559051909184917fd4735d920b0f87494915f556dd9b54c8f309026070caea5c737245152564d2669190a35050565b6000838152602081905260409020600101546001600160a01b03838116911614610971576000838152602081815260409182902060010180546001600160a01b0319166001600160a01b038616908117909155915191825284917f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0910160405180910390a25b60008381526020819052604090206001015467ffffffffffffffff828116600160a01b9092041614610a0d5760008381526020818152604091829020600101805467ffffffffffffffff60a01b1916600160a01b67ffffffffffffffff861690810291909117909155915191825284917f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa68910160405180910390a25b505050565b600060208284031215610a2457600080fd5b5035919050565b80356001600160a01b0381168114610a4257600080fd5b919050565b600080600060608486031215610a5c57600080fd5b8335925060208401359150610a7360408501610a2b565b90509250925092565b803567ffffffffffffffff81168114610a4257600080fd5b60008060408385031215610aa757600080fd5b82359150610ab760208401610a7c565b90509250929050565b60008060408385031215610ad357600080fd5b82359150610ab760208401610a2b565b600080600080600060a08688031215610afb57600080fd5b8535945060208601359350610b1260408701610a2b565b9250610b2060608701610a2b565b9150610b2e60808701610a7c565b90509295509295909350565b60008060408385031215610b4d57600080fd5b610b5683610a2b565b915060208301358015158114610b6b57600080fd5b809150509250929050565b60008060008060808587031215610b8c57600080fd5b84359350610b9c60208601610a2b565b9250610baa60408601610a2b565b9150610bb860608601610a7c565b905092959194509250565b60008060408385031215610bd657600080fd5b610bdf83610a2b565b9150610ab760208401610a2b565b6020808252600c908201526b1d5b985d5d1a1bdc9a5e995960a21b60408201526060019056fea26469706673582212202e06d1eeede8c1b1d28d607051947d857ae63d4b486c918ed65c379c5a1a819464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80631896f70a1161008c578063a22cb46511610066578063a22cb46514610291578063cf408823146102a4578063e985e9c5146102b7578063f79fe5381461030357600080fd5b80631896f70a146102585780635b0fc9c31461026b5780635ef2c7f01461027e57600080fd5b806306ab5923116100c857806306ab5923146101c25780630cba6ee5146101e357806314ab9038146101f657806316a25cbd1461020b57600080fd5b80630178b8bf146100ef57806301e647251461013857806302571be3146101af575b600080fd5b61011b6100fd366004610a12565b6000908152602081905260409020600101546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b61017f610146366004610a12565b600060208190529081526040902080546001909101546001600160a01b0391821691811690600160a01b900467ffffffffffffffff1683565b604080516001600160a01b03948516815293909216602084015267ffffffffffffffff169082015260600161012f565b61011b6101bd366004610a12565b61032e565b6101d56101d0366004610a47565b61035c565b60405190815260200161012f565b6101d56101f1366004610a47565b610448565b610209610204366004610a94565b61056e565b005b61023f610219366004610a12565b600090815260208190526040902060010154600160a01b900467ffffffffffffffff1690565b60405167ffffffffffffffff909116815260200161012f565b610209610266366004610ac0565b610654565b610209610279366004610ac0565b61072c565b61020961028c366004610ae3565b6107a3565b61020961029f366004610b3a565b6107c5565b6102096102b2366004610b76565b61087d565b6102f36102c5366004610bc3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b604051901515815260200161012f565b6102f3610311366004610a12565b6000908152602081905260409020546001600160a01b0316151590565b6000818152602081905260408120546001600160a01b03163081036103565750600092915050565b92915050565b60008381526020819052604081205484906001600160a01b0316338114806103a757506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6103cc5760405162461bcd60e51b81526004016103c390610bed565b60405180910390fd5b604080516020808201899052818301889052825180830384018152606090920190925280519101206103fe8186610892565b6040516001600160a01b0386168152869088907fce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e829060200160405180910390a39695505050505050565b60008381526020819052604081205484906001600160a01b03163381148061049357506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6104af5760405162461bcd60e51b81526004016103c390610bed565b604080516020810188905290810186905260009060600160408051601f1981840301815291815281516020928301206000818152928390529120600101549091506001600160a01b03868116911614610564576000818152602081815260409182902060010180546001600160a01b0319166001600160a01b038916908117909155915191825282917f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0910160405180910390a25b9695505050505050565b60008281526020819052604090205482906001600160a01b0316338114806105b957506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6105d55760405162461bcd60e51b81526004016103c390610bed565b60405167ffffffffffffffff8416815284907f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa689060200160405180910390a25050600091825260208290526040909120600101805467ffffffffffffffff909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b60008281526020819052604090205482906001600160a01b03163381148061069f57506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6106bb5760405162461bcd60e51b81526004016103c390610bed565b6040516001600160a01b038416815284907f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a09060200160405180910390a2505060009182526020829052604090912060010180546001600160a01b0319166001600160a01b03909216919091179055565b60008281526020819052604090205482906001600160a01b03163381148061077757506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6107935760405162461bcd60e51b81526004016103c390610bed565b61079d8484610892565b50505050565b60006107b086868661035c565b90506107bd8184846108eb565b505050505050565b6001600160a01b03821633036108115760405162461bcd60e51b815260206004820152601160248201527030b8383937bb32903a379031b0b63632b960791b60448201526064016103c3565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610887848461072c565b61079d8483836108eb565b60008281526020819052604080822080546001600160a01b0319166001600160a01b0385169081179091559051909184917fd4735d920b0f87494915f556dd9b54c8f309026070caea5c737245152564d2669190a35050565b6000838152602081905260409020600101546001600160a01b03838116911614610971576000838152602081815260409182902060010180546001600160a01b0319166001600160a01b038616908117909155915191825284917f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0910160405180910390a25b60008381526020819052604090206001015467ffffffffffffffff828116600160a01b9092041614610a0d5760008381526020818152604091829020600101805467ffffffffffffffff60a01b1916600160a01b67ffffffffffffffff861690810291909117909155915191825284917f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa68910160405180910390a25b505050565b600060208284031215610a2457600080fd5b5035919050565b80356001600160a01b0381168114610a4257600080fd5b919050565b600080600060608486031215610a5c57600080fd5b8335925060208401359150610a7360408501610a2b565b90509250925092565b803567ffffffffffffffff81168114610a4257600080fd5b60008060408385031215610aa757600080fd5b82359150610ab760208401610a7c565b90509250929050565b60008060408385031215610ad357600080fd5b82359150610ab760208401610a2b565b600080600080600060a08688031215610afb57600080fd5b8535945060208601359350610b1260408701610a2b565b9250610b2060608701610a2b565b9150610b2e60808701610a7c565b90509295509295909350565b60008060408385031215610b4d57600080fd5b610b5683610a2b565b915060208301358015158114610b6b57600080fd5b809150509250929050565b60008060008060808587031215610b8c57600080fd5b84359350610b9c60208601610a2b565b9250610baa60408601610a2b565b9150610bb860608601610a7c565b905092959194509250565b60008060408385031215610bd657600080fd5b610bdf83610a2b565b9150610ab760208401610a2b565b6020808252600c908201526b1d5b985d5d1a1bdc9a5e995960a21b60408201526060019056fea26469706673582212202e06d1eeede8c1b1d28d607051947d857ae63d4b486c918ed65c379c5a1a819464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructs a new FNS registry."
      },
      "isApprovedForAll(address,address)": {
        "details": "Query if an address is an authorized operator for another address.",
        "params": {
          "_owner": "The address that owns the records.",
          "operator": "The address that acts on behalf of the owner."
        },
        "returns": {
          "_0": "True if `operator` is an approved operator for `owner`, false otherwise."
        }
      },
      "owner(bytes32)": {
        "details": "Returns the address that owns the specified node.",
        "params": {
          "node": "The specified node."
        },
        "returns": {
          "_0": "address of the owner."
        }
      },
      "recordExists(bytes32)": {
        "details": "Returns whether a record has been imported to the registry.",
        "params": {
          "node": "The specified node."
        },
        "returns": {
          "_0": "Bool if record exists"
        }
      },
      "resolver(bytes32)": {
        "details": "Returns the address of the resolver for the specified node.",
        "params": {
          "node": "The specified node."
        },
        "returns": {
          "_0": "address of the resolver."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s FNS records. Emits the ApprovalForAll event.",
        "params": {
          "approved": "True if the operator is approved, false to revoke approval.",
          "operator": "Address to add to the set of authorized operators."
        }
      },
      "setOwner(bytes32,address)": {
        "details": "Transfers ownership of a node to a new address. May only be called by the current owner of the node.",
        "params": {
          "_owner": "The address of the new owner.",
          "node": "The node to transfer ownership of."
        }
      },
      "setRecord(bytes32,address,address,uint64)": {
        "details": "Sets the record for a node.",
        "params": {
          "_owner": "The address of the new owner.",
          "_resolver": "The address of the resolver.",
          "_ttl": "The TTL in seconds.",
          "node": "The node to update."
        }
      },
      "setResolver(bytes32,address)": {
        "details": "Sets the resolver address for the specified node.",
        "params": {
          "_resolver": "The address of the resolver.",
          "node": "The node to update."
        }
      },
      "setSubnodeOwner(bytes32,bytes32,address)": {
        "details": "Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.",
        "params": {
          "_owner": "The address of the new owner.",
          "label": "The hash of the label specifying the subnode.",
          "node": "The parent node."
        }
      },
      "setSubnodeRecord(bytes32,bytes32,address,address,uint64)": {
        "details": "Sets the record for a subnode.",
        "params": {
          "_owner": "The address of the new owner.",
          "_resolver": "The address of the resolver.",
          "_ttl": "The TTL in seconds.",
          "label": "The hash of the label specifying the subnode.",
          "node": "The parent node."
        }
      },
      "setTTL(bytes32,uint64)": {
        "details": "Sets the TTL for the specified node.",
        "params": {
          "_ttl": "The TTL in seconds.",
          "node": "The node to update."
        }
      },
      "ttl(bytes32)": {
        "details": "Returns the TTL of a node, and any records associated with it.",
        "params": {
          "node": "The specified node."
        },
        "returns": {
          "_0": "ttl of the node."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "The FNS registry contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17,
        "contract": "contracts/FNSRegistry.sol:FNSRegistry",
        "label": "records",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Record)12_storage)"
      },
      {
        "astId": 23,
        "contract": "contracts/FNSRegistry.sol:FNSRegistry",
        "label": "operators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(Record)12_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct FNSRegistry.Record)",
        "numberOfBytes": "32",
        "value": "t_struct(Record)12_storage"
      },
      "t_struct(Record)12_storage": {
        "encoding": "inplace",
        "label": "struct FNSRegistry.Record",
        "members": [
          {
            "astId": 7,
            "contract": "contracts/FNSRegistry.sol:FNSRegistry",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9,
            "contract": "contracts/FNSRegistry.sol:FNSRegistry",
            "label": "resolver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11,
            "contract": "contracts/FNSRegistry.sol:FNSRegistry",
            "label": "ttl",
            "offset": 20,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}